  services:
    # database:
    #   image: postgres
    #   restart: always
    #   environment:
    #     - POSTGRES_USER=${POSTGRES_USER}
    #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #     - POSTGRES_DB=${POSTGRES_DB}
    #   ports:
    #     - "5433:5432"
    #   volumes:
    #     - db:/var/lib/postgresql/data
    #   networks:
    #     - app-network
    #   healthcheck:
    #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
    #     interval: 10s
    #     timeout: 5s
    #     retries: 5

   redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

   rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

    # app:
    #   build: .
    #   restart: always
    #   ports:
    #     - "8081:8080"
    #   depends_on:
    #     database:
    #       condition: service_healthy
    #     rabbitmq:
    #       condition: service_healthy
    #     redis:  # Add redis dependency
    #       condition: service_healthy  # Ensure Redis is healthy before starting app        
    #   environment:
    #     - DB_HOST=database
    #     - DB_PORT=5432
    #     - DB_USER=${POSTGRES_USER}
    #     - DB_PASSWORD=${POSTGRES_PASSWORD}
    #     - DB_NAME=${POSTGRES_DB}
    #     - LOG_FILE_PATH=/app/logs/app.log
    #   volumes:
    #     - .:/app
    #     - C:/Users/Admin/Desktop/test/logs:/app/logs
    #   networks:
    #     - app-network

    # elasticsearch:
    #   image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    #   environment:
    #     - LOG_FILE_PATH=/app/logs/elastichsearch.log
    #     - discovery.type=single-node
    #     - ELASTIC_USERNAME=elastic
    #     - ELASTIC_PASSWORD=changeme
    #     - xpack.security.enabled=false
    #   ports:
    #     - "9200:9200"
    #   networks:
    #     - app-network
      


    # kibana:
    #   image: docker.elastic.co/kibana/kibana:8.6.2
    #   environment:
    #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    #   ports:
    #     - "5601:5601"
    #   networks:
    #     - app-network

    # logstash:
    #   image: docker.elastic.co/logstash/logstash:8.6.2
    #   depends_on:
    #     - elasticsearch
    #   restart: always
    #   volumes:
    #     - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
    #     - ./logs:/logs
    #   networks:
    #     - app-network
    #   healthcheck:
    #     test: ["CMD-SHELL", "pgrep -f logstash || exit 1"]
    #     interval: 10s
    #     timeout: 5s
    #     retries: 5

    # otel-collector:
    #   image: otel/opentelemetry-collector-contrib:latest
    #   container_name: otel-collector
    #   restart: always
    #   volumes:
    #     - ./otel-config.yml:/etc/otel-config.yml:ro
    #   command: ["--config", "/etc/otel-config.yml"]
    #   ports:
    #     - "4317:4317"  # OTLP gRPC
    #     - "4318:4318"  # OTLP HTTP
    #     - "9464:9464"  # Prometheus metrics exporter
    #   networks:
    #     - app-network
    #   depends_on:
    #     - elasticsearch
    #     - logstash
        


  networks:
    app-network:
      driver: bridge

  volumes:
    db: